/*
 * frm_ChildList.java
 *
 * Created on June 7, 2009, 12:15 PM
 */
package InformationOfChild;

import MainProgram.MainForm;
import UserAndFunctions.DAO_UserFunction;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.SQLException;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author  Tuong Huy
 */
public class frm_ChildList extends javax.swing.JInternalFrame {

    private static String sConn = "";
    private String sSQL = "";
    private int start = 0;
    private int selectedRow = -1;                   //no row was selected.
    private int numrecord = 20;
    private int numOfChildCode = 0;
    private int stateOfQuery = 1;                   //1:: none ; 2:: Search
    private int condition = 0;
    private String[] sFunctionCode_AccountName;     //get permistion
    private Object[] oPermistionList;               //Array with 3 element: add, delete, edit
    private static MainForm main = null;

    /** Creates new form frm_ChildList */
    public frm_ChildList(java.awt.Frame parent, String _sConn, String[] _sFunctionCode_AccountName) {
        initComponents();
        main = (MainForm) parent;
        sConn = _sConn;
        sFunctionCode_AccountName = _sFunctionCode_AccountName;
        sSQL = "proc_getChildListWithCondition '" + start + "', '" + condition + "'";

        LoadData();
        try {
            DAO_UserFunction daouser = new DAO_UserFunction(sConn);
            oPermistionList = daouser.getPermistionList(_sFunctionCode_AccountName[1].toString(), Integer.parseInt(_sFunctionCode_AccountName[0].toString()));
        } catch (SQLException ex) {
            ex.printStackTrace();
        }

        inItComboboxConditionView();

        ActiveButton();
    }

    private void ActiveButton() {
        if (Integer.parseInt(sFunctionCode_AccountName[2]) == 0) {
            // Add permistion
            if (Integer.parseInt(oPermistionList[0].toString()) == 1) {
                btnAddNewChild.setEnabled(true);
            } else {
                btnAddNewChild.setEnabled(false);
            }

            //Edit permistion
            if (Integer.parseInt(oPermistionList[1].toString()) == 1) {
                if(selectedRow!=-1){
                    btnUpdateChild.setEnabled(true);
                }
                else{
                    btnUpdateChild.setEnabled(false);
                }
            } else {
                btnUpdateChild.setEnabled(false);
            }

            // Delete permistion
            if (Integer.parseInt(oPermistionList[2].toString()) == 1) {
                if(selectedRow!=-1){
                    btnDeleteChild.setEnabled(true);
                }
                else{
                    btnDeleteChild.setEnabled(false);
                }
            } else {
                btnDeleteChild.setEnabled(false);
            }           
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        scrollPannelChildList = new javax.swing.JScrollPane();
        tblChildList = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        btnMoveLast = new javax.swing.JButton();
        txtCurrentRecord = new javax.swing.JTextField();
        btnNext = new javax.swing.JButton();
        btnMoveFirst = new javax.swing.JButton();
        btnPrev = new javax.swing.JButton();
        lblResult = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        btnUpdateChild = new javax.swing.JButton();
        btnAddNewChild = new javax.swing.JButton();
        btnDeleteChild = new javax.swing.JButton();
        lblSearch = new javax.swing.JLabel();
        txtStringToSearch = new javax.swing.JTextField();
        btnSearchChild = new javax.swing.JButton();
        lblViewListBy = new javax.swing.JLabel();
        cbConditonView = new javax.swing.JComboBox();

        setTitle("ChildCare - Child list");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 330, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 0, Short.MAX_VALUE)
        );

        tblChildList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        scrollPannelChildList.setViewportView(tblChildList);

        jScrollPane1.setViewportView(scrollPannelChildList);

        btnMoveLast.setFont(new java.awt.Font("Tahoma", 0, 9));
        btnMoveLast.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/last.gif"))); // NOI18N
        btnMoveLast.setActionCommand("Search");
        btnMoveLast.setMargin(new java.awt.Insets(1, 10, 1, 10));
        btnMoveLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoveLastActionPerformed(evt);
            }
        });

        txtCurrentRecord.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtCurrentRecord.setText("0");
        txtCurrentRecord.setMargin(new java.awt.Insets(1, 5, 1, 5));
        txtCurrentRecord.setMinimumSize(new java.awt.Dimension(11, 20));
        txtCurrentRecord.setPreferredSize(new java.awt.Dimension(45, 20));

        btnNext.setFont(new java.awt.Font("Tahoma", 0, 9));
        btnNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/next.gif"))); // NOI18N
        btnNext.setActionCommand("Search");
        btnNext.setAlignmentX(0.5F);
        btnNext.setMargin(new java.awt.Insets(2, 0, 2, 0));
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        btnMoveFirst.setFont(new java.awt.Font("Tahoma", 0, 9));
        btnMoveFirst.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/first.gif"))); // NOI18N
        btnMoveFirst.setActionCommand("Search");
        btnMoveFirst.setMargin(new java.awt.Insets(1, 10, 1, 10));
        btnMoveFirst.setMaximumSize(new java.awt.Dimension(45, 20));
        btnMoveFirst.setMinimumSize(new java.awt.Dimension(45, 20));
        btnMoveFirst.setPreferredSize(new java.awt.Dimension(45, 20));
        btnMoveFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoveFirstActionPerformed(evt);
            }
        });

        btnPrev.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/prev.gif"))); // NOI18N
        btnPrev.setActionCommand("Prev");
        btnPrev.setAlignmentX(0.5F);
        btnPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrevActionPerformed(evt);
            }
        });

        lblResult.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblResult.setText("of 0");

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(643, Short.MAX_VALUE)
                .add(btnMoveFirst, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 35, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(btnPrev, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 26, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(15, 15, 15)
                .add(txtCurrentRecord, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(lblResult, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 57, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(btnNext, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(btnMoveLast, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 35, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btnMoveLast, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btnPrev, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btnMoveFirst, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lblResult)
                    .add(txtCurrentRecord, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btnNext, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setMaximumSize(getMaximumSize());

        btnUpdateChild.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/edit.png"))); // NOI18N
        btnUpdateChild.setText("Edit information");
        btnUpdateChild.setActionCommand("Search");
        btnUpdateChild.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateChildActionPerformed(evt);
            }
        });

        btnAddNewChild.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/add.png"))); // NOI18N
        btnAddNewChild.setText("Add new child");
        btnAddNewChild.setActionCommand("Search");
        btnAddNewChild.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewChildActionPerformed(evt);
            }
        });

        btnDeleteChild.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/del.png"))); // NOI18N
        btnDeleteChild.setText("Delete");
        btnDeleteChild.setActionCommand("Search");
        btnDeleteChild.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteChildActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(303, 303, 303)
                .add(btnAddNewChild)
                .add(20, 20, 20)
                .add(btnUpdateChild)
                .add(19, 19, 19)
                .add(btnDeleteChild)
                .addContainerGap(218, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btnUpdateChild)
                    .add(btnAddNewChild)
                    .add(btnDeleteChild))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        lblSearch.setText("Search by child name:");

        txtStringToSearch.setText("Input string to search");

        btnSearchChild.setFont(new java.awt.Font("Tahoma", 0, 10));
        btnSearchChild.setText("Search !");
        btnSearchChild.setActionCommand("Search");
        btnSearchChild.setMargin(new java.awt.Insets(0, 14, 0, 14));
        btnSearchChild.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchChildActionPerformed(evt);
            }
        });

        lblViewListBy.setText("View list by:");

        cbConditonView.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbConditonView.setPreferredSize(new java.awt.Dimension(55, 18));

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 901, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(lblViewListBy)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(65, 65, 65)
                                .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .add(layout.createSequentialGroup()
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(cbConditonView, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 268, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(lblSearch)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(txtStringToSearch, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 261, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(btnSearchChild))
                    .add(jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(20, 20, 20)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(lblSearch)
                        .add(txtStringToSearch, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(btnSearchChild)
                        .add(lblViewListBy)
                        .add(cbConditonView, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(28, 28, 28)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 427, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(25, 25, 25)
                .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(41, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchChildActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchChildActionPerformed
// TODO add your handling code here:
        if (this.txtStringToSearch.getText().trim().equals("Input string to search")) {
            JOptionPane.showMessageDialog(this, "You have not input string to search.");
            return;
        }
        start = 0;
        stateOfQuery = 2; //kep sql query
        sSQL = "exec proc_SearchChild '" + start + "', '" + this.txtStringToSearch.getText().trim().replaceAll("'", "&#39;") + "'";
        LoadData();
    }//GEN-LAST:event_btnSearchChildActionPerformed

    private void LoadData() {
        LoadDataIntoJTable(sSQL, sConn);

        try {
            DAO_Child daochild = new DAO_Child(sConn);
            numOfChildCode = daochild.countChild();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }

        lblResult.setText("of " + Integer.toString(numOfChildCode));
        this.txtCurrentRecord.setText(Integer.toString(tblChildList.getModel().getRowCount()));

        if (numOfChildCode == 0 || numOfChildCode <= numrecord) {
            btnPrev.setEnabled(false);
            btnMoveFirst.setEnabled(false);
            btnNext.setEnabled(false);
            btnMoveLast.setEnabled(false);
        } else {
            btnNext.setEnabled(true);
            btnMoveLast.setEnabled(true);
        }
    }

    private void btnDeleteChildActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteChildActionPerformed
// TODO add your handling code here:
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "You have must be select the a row in table list above.");
            return;
        }

        String childCode = tblChildList.getModel().getValueAt(selectedRow, 1).toString();

        int iResult = JOptionPane.showConfirmDialog(this, "Do you want to delete this child?", "Confirm", JOptionPane.YES_NO_OPTION);
        if (iResult == JOptionPane.YES_OPTION) {
            try {
                DAO_Child daochild = new DAO_Child(sConn);
                iResult = daochild.DeleteChild(Integer.valueOf(childCode));
                if (iResult == 1) {
                    this.LoadDataIntoJTable(sSQL, sConn);
                    numOfChildCode -= 1;
                    lblResult.setText("of " + Integer.toString(numOfChildCode));
                    this.txtCurrentRecord.setText(Integer.toString(tblChildList.getModel().getRowCount()));
                    JOptionPane.showMessageDialog(this, "Delete successfully.");
                } else {
                    JOptionPane.showMessageDialog(this, "Can not deleted this child.");
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }

    }//GEN-LAST:event_btnDeleteChildActionPerformed

    private void btnMoveFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoveFirstActionPerformed
// TODO add your handling code here:
        start = 0;
        if (stateOfQuery == 1) {
            sSQL = "proc_getChildListWithCondition '" + start + "', '" + condition + "'";
        } else {
            sSQL = "exec proc_SearchChild '" + start + "', '" + this.txtStringToSearch.getText().trim().replaceAll("'", "&#39;") + "'";
        }
        LoadDataIntoJTable(sSQL, sConn);
        this.txtCurrentRecord.setText(Integer.toString(tblChildList.getModel().getRowCount()));

        if (numOfChildCode == 0 || numOfChildCode <= numrecord) {
            btnPrev.setEnabled(false);
            btnMoveFirst.setEnabled(false);
            btnNext.setEnabled(false);
            btnMoveLast.setEnabled(false);
        } else {
            btnNext.setEnabled(true);
            btnMoveLast.setEnabled(true);
        }
    }//GEN-LAST:event_btnMoveFirstActionPerformed

    private void btnMoveLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoveLastActionPerformed
// TODO add your handling code here:
        start = numrecord * (numOfChildCode / numrecord);
        if (stateOfQuery == 1) {
            sSQL = "proc_getChildListWithCondition '" + start + "', '" + condition + "'";
        } else {
            sSQL = "exec proc_SearchChild '" + start + "', '" + this.txtStringToSearch.getText().trim().replaceAll("'", "&#39;") + "'";
        }
        LoadDataIntoJTable(sSQL, sConn);
        btnPrev.setEnabled(true);
        btnMoveFirst.setEnabled(true);
        btnNext.setEnabled(false);
        btnMoveLast.setEnabled(false);
        this.txtCurrentRecord.setText(Integer.toString(numOfChildCode));
    }//GEN-LAST:event_btnMoveLastActionPerformed

    private void btnPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrevActionPerformed
// TODO add your handling code here:
        //get prev segment
        start -= numrecord;
        if (stateOfQuery == 1) {
            sSQL = "proc_getChildListWithCondition '" + start + "', '" + condition + "'";
        } else {
            sSQL = "exec proc_SearchChild '" + start + "', '" + this.txtStringToSearch.getText().trim().replaceAll("'", "&#39;") + "'";
        }

        LoadDataIntoJTable(sSQL, sConn);
        //int maxSegment = Integer.valueOf(tblChildList.getModel().getValueAt(tblChildList.getModel().getRowCount()-1, 0).toString()).intValue();
        this.txtCurrentRecord.setText(Integer.toString(Integer.parseInt(this.txtCurrentRecord.getText()) - tblChildList.getModel().getRowCount()));
        //if (maxChildCode == maxSegment || start==0){
        if (start == 0) {
            btnPrev.setEnabled(false);
            btnMoveFirst.setEnabled(false);
            this.txtCurrentRecord.setText("4");
        }

        if (tblChildList.getModel().getRowCount() > 0) {
            btnNext.setEnabled(true);
            btnMoveLast.setEnabled(true);
        }
    }//GEN-LAST:event_btnPrevActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
// TODO add your handling code here:
        //get next segment
        start += numrecord;
        if (stateOfQuery == 1) {
            sSQL = "proc_getChildListWithCondition '" + start + "', '" + condition + "'";
        } else {
            sSQL = "exec proc_SearchChild '" + start + "', '" + this.txtStringToSearch.getText().trim().replaceAll("'", "&#39;") + "'";
        }

        LoadDataIntoJTable(sSQL, sConn);
        if (tblChildList.getModel().getRowCount() > 0) {
            btnPrev.setEnabled(true);
            btnMoveFirst.setEnabled(true);
            this.txtCurrentRecord.setText(Integer.toString(Integer.parseInt(this.txtCurrentRecord.getText()) + tblChildList.getModel().getRowCount()));
        }
        if (tblChildList.getModel().getRowCount() < numrecord) {
            btnNext.setEnabled(false);
            btnMoveLast.setEnabled(false);
        }
    }//GEN-LAST:event_btnNextActionPerformed

    private void inItComboboxConditionView() {
        cbConditonView.removeAllItems();
        String[] conditionView = {"----------------------- All ---------------------", "Children choose the nanny", "Children who are not selected child care"};
        for (int i = 0; i < conditionView.length; i++) {
            cbConditonView.addItem(conditionView[i]);
        }
        cbConditonView.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                JComboBox cb = (JComboBox) e.getSource();
                String sCondition = (String) cb.getSelectedItem();

                start = 0;
                if (sCondition.equals("Children choose the nanny")) {
                    condition = 1;
                } else if (sCondition.equals("Children who are not selected child care")) {
                    condition = 2;
                } else {
                    condition = 0;
                }
                sSQL = "proc_getChildListWithCondition '" + start + "', '" + condition + "'";
                stateOfQuery = 1;
                LoadData();
            }
        });
    }

    private void btnUpdateChildActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateChildActionPerformed
        // TODO add your handling code here:
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "You have must be select the a row in table list above.");
            return;
        }
        String childCode = tblChildList.getModel().getValueAt(selectedRow, 1).toString();
        Child child = new Child();
        try {
            DAO_Child daochild = new DAO_Child(sConn);
            child = daochild.getInformationChildFromDatabase(childCode);
            String nannyName = "";
            nannyName = daochild.getNannyName(childCode);
            child.setNannyName(nannyName);
            new dialog_Update_InformationOfChild(main, true, sConn, child, sSQL, this).setVisible(true);
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnUpdateChildActionPerformed

    private void btnAddNewChildActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewChildActionPerformed
// TODO add your handling code here:
        new dialog_Add_InformationOfChild(main, true, sConn, sSQL, this).setVisible(true);
    }//GEN-LAST:event_btnAddNewChildActionPerformed

    public void LoadDataIntoJTable(String sSQL, String sConn) {
        try {
            tableModelChild tblModel = new tableModelChild(sConn);
            tblModel.setQuery(sSQL);
            tblChildList.setModel(tblModel);

            ListSelectionModel cellSelectionModel = tblChildList.getSelectionModel();
            cellSelectionModel.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

            cellSelectionModel.addListSelectionListener(new ListSelectionListener() {

                public void valueChanged(ListSelectionEvent e) {
                    if (e.getValueIsAdjusting()) {
                        return;
                    }

                    ListSelectionModel lsm = (ListSelectionModel) e.getSource();
                    if (lsm.isSelectionEmpty()) {
                        //no row selected
                    } else {
                        selectedRow = lsm.getMinSelectionIndex();
                        ActiveButton();
                    }

                }
            });

            //----- Mouse event
            tblChildList.addMouseListener(new MouseAdapter() {

                @Override
                public void mouseClicked(MouseEvent e) {
                    // Left mouse click
                    if (SwingUtilities.isLeftMouseButton(e)) {
                        // Do something
                    } // Right mouse click
                    else if (SwingUtilities.isRightMouseButton(e)) {
                        // get the coordinates of the mouse click
                        Point p = e.getPoint();

                        // get the row index that contains that coordinate
                        int rowNumber = tblChildList.rowAtPoint(p);

                        // Get the ListSelectionModel of the JTable
                        ListSelectionModel model = tblChildList.getSelectionModel();

                        // set the selected interval of rows. Using the "rowNumber"
                        // variable for the beginning and end selects only that one row.
                        model.setSelectionInterval(rowNumber, rowNumber);
                    }
                }
            });

        // ------------------------------

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddNewChild;
    private javax.swing.JButton btnDeleteChild;
    private javax.swing.JButton btnMoveFirst;
    private javax.swing.JButton btnMoveLast;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrev;
    private javax.swing.JButton btnSearchChild;
    private javax.swing.JButton btnUpdateChild;
    private javax.swing.JComboBox cbConditonView;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblResult;
    private javax.swing.JLabel lblSearch;
    private javax.swing.JLabel lblViewListBy;
    private javax.swing.JScrollPane scrollPannelChildList;
    private javax.swing.JTable tblChildList;
    private javax.swing.JTextField txtCurrentRecord;
    private javax.swing.JTextField txtStringToSearch;
    // End of variables declaration//GEN-END:variables
}
