/*
 * dialog_SelectNanny.java
 *
 * Created on June 15, 2009, 11:19 PM
 */
package InformationOfChild;

import MainProgram.MainForm;
import Nanny.DAO_Nanny;
import Nanny.DetailOfNanny;
import Nanny.Entity;
import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author  Tuong Huy
 */
public class dialog_SelectNanny extends javax.swing.JDialog {

    DAO_Child daochild = null;
    public static String sConn = "";
    public static Child child = null;
    public static String sSQL = "";
    public static dialog_Update_InformationOfChild dialog = null;
    int selectedRow = -1;
    MainForm main = null;

    /** Creates new form dialog_SelectNanny */
    public dialog_SelectNanny(java.awt.Frame parent, boolean modal, String _sConn, Child _child, dialog_Update_InformationOfChild _dialog) {
        super(parent, modal);
        initComponents();

        dialog = (dialog_Update_InformationOfChild) _dialog;
        main = (MainForm) parent;
        sConn = _sConn;
        child = (Child) _child;
        daochild = new DAO_Child(sConn);

        sSQL = "SELECT ROW_NUMBER() OVER (ORDER BY Name Asc) AS No, n.NannyCode, n.Name, n.ChildAssignedToHer, COALESCE(a.NumOfChild, 0) As NumOfChild ";
        sSQL += "FROM tbl_Nanny n ";
        sSQL += "LEFT OUTER JOIN (SELECT Count(NannyCode)As NumOfChild, NannyCode FROM tbl_Child_Nanny GROUP BY NannyCode) a ";
        sSQL += "ON a.NannyCode = n.NannyCode WHERE Name <> N'" + child.getNannyName() + "' Order By Name Asc";

        LoadDataIntoJTable(sSQL, sConn);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblNannyList = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        btnChangeNanny = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        btnViewDetail = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Select the nanny for child");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18));
        jLabel1.setText("Select nanny for child");

        tblNannyList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblNannyList);

        jScrollPane1.setViewportView(jScrollPane2);

        btnChangeNanny.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/save.png"))); // NOI18N
        btnChangeNanny.setText("Save change");
        btnChangeNanny.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeNannyActionPerformed(evt);
            }
        });

        btnExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/close2.png"))); // NOI18N
        btnExit.setText("Cancel");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        btnViewDetail.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/detail.png"))); // NOI18N
        btnViewDetail.setText("View detail");
        btnViewDetail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewDetailActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(196, 196, 196)
                .add(btnChangeNanny)
                .add(14, 14, 14)
                .add(btnViewDetail)
                .add(15, 15, 15)
                .add(btnExit)
                .addContainerGap(141, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btnChangeNanny)
                    .add(btnViewDetail)
                    .add(btnExit))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 681, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel1)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 375, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnChangeNannyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeNannyActionPerformed
// TODO add your handling code here:
        if (selectedRow != -1) {
            int maxChild = Integer.parseInt(tblNannyList.getModel().getValueAt(selectedRow, 3).toString());
            int curChild = Integer.parseInt(tblNannyList.getModel().getValueAt(selectedRow, 4).toString());

            if (maxChild == curChild) {
                JOptionPane.showMessageDialog(this, "This nanny cannot received the child. Please select the other nanny.");
                return;
            }

            String nannyCode = tblNannyList.getModel().getValueAt(selectedRow, 1).toString();

            int iResult = JOptionPane.showConfirmDialog(this, "Do you want to save the changes?", "Confirm", JOptionPane.YES_NO_OPTION);
            if (iResult == JOptionPane.YES_OPTION) {
                try {
                    iResult = daochild.ChangeNannyForChild(Integer.parseInt(child.getChildCode()), Integer.parseInt(nannyCode));
                    if (iResult == 1) {
                        // reload data
                        child.setNannyName(tblNannyList.getModel().getValueAt(selectedRow, 1).toString());
                        LoadDataIntoJTable(sSQL, sConn);
                        dialog.showForm(child);
                        JOptionPane.showMessageDialog(this, "Information of the Child was saved.");
                    }
                } catch (SQLException sqlEx) {
                    sqlEx.printStackTrace();
                }
            }
            this.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "You have must select a nanny.");
        }
    }//GEN-LAST:event_btnChangeNannyActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
// TODO add your handling code here:
        this.setVisible(false);
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnViewDetailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewDetailActionPerformed
        // TODO add your handling code here:
        if (selectedRow != -1) {
            String nannyCode = tblNannyList.getModel().getValueAt(selectedRow, 1).toString();
            try {
                DAO_Nanny daonanny = new DAO_Nanny(sConn);
                Entity nanny = daonanny.getInformationNanny(nannyCode);
                new DetailOfNanny(main, true, nanny).setVisible(true);
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        } else {
            JOptionPane.showMessageDialog(this, "You have must select a nanny.");
        }
    }//GEN-LAST:event_btnViewDetailActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new dialog_SelectNanny(new javax.swing.JFrame(), true, sConn, child, dialog).setVisible(true);
            }
        });
    }

    public void LoadDataIntoJTable(String sSQL, String sConn) {
        try {
            tableModelChild tblModel = new tableModelChild(sConn);
            tblModel.setQuery(sSQL);
            tblNannyList.setModel(tblModel);

            ListSelectionModel cellSelectionModel = tblNannyList.getSelectionModel();
            cellSelectionModel.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

            cellSelectionModel.addListSelectionListener(new ListSelectionListener() {

                public void valueChanged(ListSelectionEvent e) {
                    if (e.getValueIsAdjusting()) {
                        return;
                    }

                    ListSelectionModel lsm = (ListSelectionModel) e.getSource();
                    if (lsm.isSelectionEmpty()) {
                        //no row selected
                    } else {
                        selectedRow = lsm.getMinSelectionIndex();
                    }

                }
            });

            //----- Mouse event
            tblNannyList.addMouseListener(new MouseAdapter() {

                @Override
                public void mouseClicked(MouseEvent e) {
                    // Left mouse click
                    if (SwingUtilities.isLeftMouseButton(e)) {
                        // Do something
                    } // Right mouse click
                    else if (SwingUtilities.isRightMouseButton(e)) {
                        // get the coordinates of the mouse click
                        Point p = e.getPoint();

                        // get the row index that contains that coordinate
                        int rowNumber = tblNannyList.rowAtPoint(p);

                        // Get the ListSelectionModel of the JTable
                        ListSelectionModel model = tblNannyList.getSelectionModel();

                        // set the selected interval of rows. Using the "rowNumber"
                        // variable for the beginning and end selects only that one row.
                        model.setSelectionInterval(rowNumber, rowNumber);
                    }
                }
            });

        // ------------------------------

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnChangeNanny;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnViewDetail;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblNannyList;
    // End of variables declaration//GEN-END:variables
}
